from aiogram.types.callback_query import CallbackQuery
from keyboards.inline.support_inline import work_with_user_answer
import os

from aiogram import types
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.storage import FSMContext
from aiogram.types.message import ContentType, Message
from data.config import SUPPORT_CHAT
from keyboards.default.upanel import *
from keyboards.inline.user_inline import *
from loader import dp
from states.all_states import Request, uAnswer
from utils.db_work.asks_tools.decline_request import decl_request
from utils.db_work.auth_tools.is_user_authorized import is_authorized
from utils.db_work.asks_tools.request_register import request_reg
from utils.db_work.asks_tools.saving_attachs import save_attach
from utils.db_work.asks_tools.processing_attachs import get_attachs, edit_attach_status
from aiogram.types.input_media import InputMediaDocument, InputMediaPhoto
import re
from utils.db_work.asks_tools.saving_answer import save_answer

""" –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –∑–∞—è–≤–∫—É """
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('cont_ask'))
async def user_continue(callback_query: CallbackQuery, state: FSMContext):
    # –í—ã–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ callback_data –≤ —Å–ø–∏—Å–æ–∫
    cb_data = []
    for item in callback_query.data.split(":"):
        if not item.strip():
            continue
        cb_data.append(item.strip())
    
    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    await dp.bot.edit_message_reply_markup(
            callback_query.from_user.id,
            callback_query.message.message_id,
            reply_markup=None
        )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –æ—Ç–≤–µ—Ç–∞
    time_info = []
    time_exp = []
    for item in cb_data[4].split(" "):
        if not item.strip():
            continue
        time_info.append(item.strip())
    
    if len(time_info) > 1:
        time_info.pop(0)
    
    for item in str(time_info).split(":"):
        if not item.strip():
            continue
        time_exp.append(item.strip())
    
    if int(str(time_exp[0]).replace("[\'", '').replace("\']", '')) < 1:
        await dp.bot.send_message(callback_query.from_user.id, '–£–ø—Å... –ü—Ä–æ—à–µ–ª —á–∞—Å, –∑–∞—è–≤–∫–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞.')
    else:
        # –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–≤–µ—Ç–∏—Ç—å
        if cb_data[1] == 'answer':
            await dp.bot.send_message(
                cb_data[3],
                f'–û–∂–∏–¥–∞—é –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞—è–≤–∫—É #{cb_data[2]}...\n\n' +
                f'–ï—Å–ª–∏ –∫ –æ—Ç–≤–µ—Ç—É –±—É–¥—É—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã, —Ç–æ —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∏—Ö, –∞ –ø–æ—Å–ª–µ - ' +
                f'—Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n–ï—Å–ª–∏ –∂–µ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –Ω–∏—á–µ–≥–æ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å—Å—è –Ω–µ –±—É–¥–µ—Ç, —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ üôÇ\n\n' +
                f'<i>P.S.: –ö –∑–∞—è–≤–∫–µ –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ 1 —Ç–∏–ø–∞ - –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã.</i>'
            )

            await uAnswer.attach_type.set()
            async with state.proxy() as data:
                data['attach_type'] = None
                data['ask_id'] = cb_data[2]

            await uAnswer.msg.set()

        # –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å
        if cb_data[1] == 'close':
            await dp.bot.send_message(
                cb_data[3],
                f'–ó–∞—è–≤–∫–∞ #{cb_data[2]} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ :)',
                reply_markup=await upanel_kb()
            )

            await dp.bot.send_message(
                SUPPORT_CHAT,
                f'@{callback_query.from_user.username} –∑–∞–∫—Ä—ã–ª –∑–∞—è–≤–∫—É.'
            )

""" –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """
@dp.message_handler(state=uAnswer.msg, content_types=ContentType.PHOTO)
@dp.message_handler(state=uAnswer.msg, content_types=ContentType.TEXT)
@dp.message_handler(state=uAnswer.msg, content_types=ContentType.DOCUMENT)
async def get_user_answer(msg: Message, state: FSMContext):
# –ö–æ—Å—Ç—ã–ª—å
    async with state.proxy() as data:
        data['s'] = 's'

    # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç
    if msg.content_type == 'document':
        # –ï—Å–ª–∏ –±—ã–ª–∞ –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –∫ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º
        if data['attach_type'] == '–ö–∞—Ä—Ç–∏–Ω–∫–∞' and data['attach_type'] is not None:
            await msg.answer('ü§ï –û—à–∏–±–∫–∞, –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –ª–∏–±–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏, –ª–∏–±–æ –¥–æ–∫—É–º–µ–Ω—Ç—ã.')
        else:
            async with state.proxy() as data:
                data['attach_type'] = '–î–æ–∫—É–º–µ–Ω—Ç'

            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
            doc_info = await dp.bot.get_file(msg.document.file_id)
            # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞ –∏–º—è –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
            doc_name, doc_extension = os.path.splitext(doc_info.file_path)
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            download_doc = await dp.bot.download_file(doc_info.file_path)
            # –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∏ –∏–º—è —Ñ–∞–π–ª
            # –•—Ä–∞–Ω–∏–º —Ñ–∞–π–ª—ã —Å UID –≤ –∏–º–µ–Ω–∏
            doc_src = 'documents/' + doc_info.file_unique_id + doc_extension
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ
            await save_attach(data['ask_id'], doc_info.file_unique_id + doc_extension, '–î–æ–∫—É–º–µ–Ω—Ç', 'user', 'no')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–∞—Ç–∞–ª–æ–≥
            with open(doc_src, 'wb') as new_doc:
                new_doc.write(download_doc.getvalue())

    # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞
    if msg.content_type == 'photo':
        # –ï—Å–ª–∏ –±—ã–ª–∞ –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
        if data['attach_type'] == '–î–æ–∫—É–º–µ–Ω—Ç' and data['attach_type'] is not None:
            await msg.answer('ü§ï –û—à–∏–±–∫–∞, –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –ª–∏–±–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏, –ª–∏–±–æ –¥–æ–∫—É–º–µ–Ω—Ç—ã.')
        else:
            async with state.proxy() as data:
                data['attach_type'] = '–ö–∞—Ä—Ç–∏–Ω–∫–∞'

            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
            pic_info = await dp.bot.get_file(msg.photo[-1].file_id)
            # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞ –∏–º—è –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
            pic_name, pic_extension = os.path.splitext(pic_info.file_path)
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            download_pic = await dp.bot.download_file(pic_info.file_path)
            # –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∏ –∏–º—è —Ñ–∞–π–ª–∞
            # –•—Ä–∞–Ω–∏–º –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å UID –≤ –∏–º–µ–Ω–∏, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω –∫–æ—Ä–æ—á–µ
            pic_src = 'photos/' + pic_info.file_unique_id + pic_extension
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ
            await save_attach(data['ask_id'], pic_info.file_unique_id + pic_extension, '–ö–∞—Ä—Ç–∏–Ω–∫–∞', 'user', 'no')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–∞—Ç–∞–ª–æ–≥
            with open(pic_src, 'wb') as new_pic:
                new_pic.write(download_pic.getvalue())

    # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if msg.content_type == 'text' and len(msg.text) > 0:
        await msg.answer('–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.')
        if data['attach_type'] is None:
            # –ë–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π
            async with state.proxy() as data:
                data['msg'] = msg.text
                data['have_attach'] = '–Ω–µ—Ç'

            await dp.bot.send_message(
                SUPPORT_CHAT,
                f'@{msg.from_user.username} –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –æ–±—â–µ–Ω–∏–µ –ø–æ –∑–∞—è–≤–∫–µ #{data["ask_id"]}.\n\n{data["msg"]}',
                reply_markup=await work_with_user_answer(data['ask_id'], msg.from_user.id)
            )
        else:
            # –° –≤–ª–æ–∂–µ–Ω–∏—è–º–∏
            async with state.proxy() as data:
                data['msg'] = msg.text
                data['have_attach'] = '–¥–∞'

            await dp.bot.send_message(
                SUPPORT_CHAT,
                f'@{msg.from_user.username} –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –æ–±—â–µ–Ω–∏–µ –ø–æ –∑–∞—è–≤–∫–µ #{data["ask_id"]}.\n\n{data["msg"]}',
                reply_markup=await work_with_user_answer(data['ask_id'], msg.from_user.id)
            )

            # –ü–æ–ª—É—á–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏—è
            files = await get_attachs(data['ask_id'], 'user', 'no')
            attach = ''
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö –ø–æ —Ç–∏–ø—É
            if re.search('–î–æ–∫—É–º–µ–Ω—Ç', str(files)):
                # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –ø–µ—Ä–≤—ã–π —Å –ø–æ–¥–ø–∏—Å—å—é
                attach = [InputMediaDocument(open(f'documents/{files[0]["name"]}', 'rb'), caption=f"–í–ª–æ–∂–µ–Ω–∏—è –∫ –∑–∞—è–≤–∫–µ #{data['ask_id']}")]
                    
                # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
                for item in range(1, len(files)):
                    attach.insert(0, InputMediaDocument(open(f'documents/{files[item]["name"]}', 'rb')))
            if re.search('–ö–∞—Ä—Ç–∏–Ω–∫–∞', str(files)):
                # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –ø–µ—Ä–≤—É—é —Å –ø–æ–¥–ø–∏—Å—å—é
                attach = [InputMediaPhoto(open(f'photos/{files[0]["name"]}', 'rb'), caption=f"–í–ª–æ–∂–µ–Ω–∏—è –∫ –∑–∞—è–≤–∫–µ #{data['ask_id']}")]
                
                # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
                for item in range(1, len(files)):
                    attach.append(InputMediaPhoto(open(f'photos/{files[item]["name"]}', 'rb')))
            try:
                await dp.bot.send_media_group(SUPPORT_CHAT, attach)
            except Exception as e:
                await dp.bot.send_message(SUPPORT_CHAT, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–ª—å–±–æ–º–∞.\n–§–∞–π–ª: handlers/users/continue_request.py\n–ú–µ—Ç–æ–¥: get_user_answer\n\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–∑—É.\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:\n\n{str(e)}')
            await edit_attach_status(data["ask_id"], 'user')
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç —é–∑–µ—Ä–∞
        await save_answer(data['ask_id'], data['have_attach'], msg.from_user.username, None, data['msg'], None)
        
        await state.finish()
