import asyncio
import logging
from os import stat

from aiogram.types.message import Message
from utils.other.users_process import is_subs
from aiogram.dispatcher.filters import Text
from aiogram import types
from aiogram.dispatcher.storage import FSMContext
from keyboards.default.upanel import *
from keyboards.inline.user_inline import *
from states.all_states import Auth
from utils.db_work.auth_tools.check_user import get_email
from utils.db_work.auth_tools.reg_auth_session import reg_session
from utils.db_work.auth_tools.close_auth_session import close_session
from utils.db_work.auth_tools.save_auth_data import save_auth
from utils.db_work.users_tools.getting_user_info import get_user_info
from loader import dp

# region –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
""" –û—Ç–º–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ """
@dp.message_handler(Text(contains='–í—ã–π—Ç–∏'), state='*')
async def decline_auth(msg: Message, state: FSMContext):
    await msg.answer(
        '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.',
        reply_markup=await upanel_kb()
    )

    # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω–∏—Ç—å –≤ –º–æ–º–µ–Ω—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞
    if await state.get_state() == 'Auth:get_code':
        await close_session(msg.from_user.username)

    await state.finish()

""" –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """
@dp.message_handler(Text(contains='–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è'))
async def authorization(msg: Message):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∏–∑ –ª–∏—á–∫–∏
    if msg.chat.id > 0:
        await msg.answer(
            '–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —É–∫–∞–∑—ã–≤–∞–ª –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ.',
            reply_markup=await cancel_auth()
        )

        await Auth.username.set()

""" –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ """
@dp.message_handler(state=Auth.username)
async def get_username(msg: Message, state: FSMContext):
    if len(msg.text) > 0:
        await msg.answer('–ü—Ä–æ–≤–µ—Ä—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        response = await get_email(msg.text)

        if response is False:
            await msg.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.text} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑...\n\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —É–∫–∞–∑—ã–≤–∞–ª –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ.')
        else:
            await msg.answer(
                f'–ù–∞ —Ç–≤–æ—é –ø–æ—á—Ç—É ({response}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∏—Å—å–º–æ —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –æ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ <b>—á–∞—Å–∞</b>, –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ –º–Ω–µ, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é :)\n\n' +
                f'<i>P.S.: –ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞–ø–∫—É \"–°–ø–∞–º\", –∏–Ω–æ–≥–¥–∞ –ø–∏—Å—å–º–∞ –ø–æ–ø–∞–¥–∞—é—Ç –≤ –Ω–µ–µ.</i>'
            )

            code = await reg_session(msg.text, msg.from_user.username, response)

            async with state.proxy() as data:
                data['username'] = msg.text
                data['get_code'] = code

            await Auth.get_code.set()

""" –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ """

# –ö–æ–¥ —É–∫–∞–∑–∞–Ω –Ω–µ —á–∏—Å–ª–æ–º
@dp.message_handler(lambda msg: not msg.text.isdigit(), state=Auth.get_code)
async def process_auth_code_e(msg: Message, state: FSMContext):
    await msg.answer('–ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞.\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–æ–¥.')

# –ö–æ–¥ —É–∫–∞–∑–∞–Ω —á–∏—Å–ª–æ–º
@dp.message_handler(lambda msg: msg.text.isdigit(), state=Auth.get_code)
async def process_auth_code(msg: Message, state: FSMContext):
    async with state.proxy() as data:
        if data['get_code'] == int(msg.text):
            await msg.answer('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–∞!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ, —è —Å–æ—Ö—Ä–∞–Ω—è—é —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å üôÇ')

            subs_param, text = await is_subs(msg.from_user.id)

            if subs_param != 'ok':
                await msg.answer(
                        text,
                        reply_markup=await join_us(msg.from_user.id, subs_param)
                    )
            

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            await save_auth(msg.from_user.username, msg.text)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —é–∑–µ—Ä–∞
            await get_user_info(msg.from_user.username, msg.from_user.id, data['username'])

            await state.finish()
            await msg.answer(
                '–í—Å–µ –≥–æ—Ç–æ–≤–æ, —Ç–µ–ø–µ—Ä—å —è —Å–º–æ–≥—É –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ —Ç–µ–±–µ –ø–æ–º–æ–≥–∞—Ç—å :)\n' +
                '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–æ–π <b>\"–ü–æ–º–æ—â—å\"</b> –∏–ª–∏ –≤–≤–µ–¥–∏ /help.\n\n',
                reply_markup=await upanel_kb()
                )
        else:
            await msg.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.')
# endregion


# region –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏
@dp.message_handler(Text(contains='–£ –º–µ–Ω—è –µ—â–µ –Ω–µ—Ç —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏'))
async def unauthorized(msg: Message):
    await msg.answer(
        '–û—á–µ–Ω—å –∂–∞–ª—å, —Ç—ã –º–æ–∂–µ—à—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! –î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø–ª—å–∑—É–π—Å—è –∫–Ω–æ–∫–æ–π –Ω–∏–∂–µ.\n\n' +
        '–¢–∞–∫–∂–µ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞—è–≤–æ–∫, –Ω–æ –∏—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±—É–¥–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π.',
        reply_markup=await register_kb()
    )
# endregion