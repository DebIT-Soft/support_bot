import asyncio
from json import load
from os import dup
from typing import Union
from aiogram.types.callback_query import CallbackQuery

from aiogram.types.message import Message
from aiogram import types
from aiogram.dispatcher.storage import FSMContext
from data.config import USERS
from loader import dp
from keyboards.default.upanel import *
from aiogram.dispatcher.filters import Text
from utils.other.users_process import build_profile, dump_paid_products

from keyboards.inline.user_inline import *

""" –ü—Ä–æ—Ñ–∏–ª—å """
@dp.message_handler(Text(equals='üë§ –ü—Ä–æ—Ñ–∏–ª—å'))
async def get_profile(msg: Message):
    await show_profile(msg = msg)

# –û—Ç–ø—Ä–∞–≤–∫–∞ —é–∑–µ—Ä—É –ø—Ä–æ—Ñ–∏–ª—è
async def show_profile(msg: Union[CallbackQuery, Message]):
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    profile_msg, prod_li = await build_profile(msg.from_user.username)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = await profile_kb(prod_li)

    # –ï—Å–ª–∏ –ø—Ä–∏–ª–µ—Ç–µ–ª–æ —Å–æ–æ–±—â–Ω–∏–µ, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    if isinstance(msg, Message):
        await msg.answer(profile_msg, reply_markup = markup)

    # –ï—Å–ª–∏ –ø—Ä–∏–ª–µ—Ç–µ–ª–∞ CBQ
    if isinstance(msg, CallbackQuery):
        call = msg

        await call.message.edit_text(profile_msg, reply_markup = markup)

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–¥—É–∫—Ç–æ–≤
async def show_my_product(call: CallbackQuery, product):
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = await products_kb()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
    prod_info = await dump_paid_products(product, call.from_user.username)

    # –ò–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await call.message.edit_text(prod_info, reply_markup = markup)

""" –û–±—Ä–∞–±–æ—Ç–∫–∞ cb_data –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ """
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('prod'))
async def products_process(callback_query: types.CallbackQuery, state: FSMContext):
    # –í—ã–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ callback_data –≤ —Å–ø–∏—Å–æ–∫
    cb_data = []
    for item in callback_query.data.split(":"):
        if not item.strip():
            continue
        cb_data.append(item.strip())
    
    # –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç—å
    if cb_data[1] == 'close':
        await callback_query.message.delete()
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    elif cb_data[1] == 'back':
        await show_profile(msg = callback_query)
    # –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
    else:
        await callback_query.answer('‚ôªÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞...')
        await show_my_product(call = callback_query, product = cb_data[1])

""" –ù–∞—Å—Ç—Ä–æ–π–∫–∏ """
@dp.message_handler(Text(equals='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'))
async def get_settings(msg: Message):
    await msg.answer('üîñ –°–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º :)')

""" –ü–æ–º–æ—â—å """
@dp.message_handler(Text(equals='üìú –ü–æ–º–æ—â—å'))
async def get_help(msg: Message):
    await msg.answer('–ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —Ç–∞–º –≤—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–æ!', reply_markup=await open_help_page())

""" –ó–∞—è–≤–∫–∏ """
@dp.message_handler(Text(equals='üì¨ –ú–æ–∏ –∑–∞—è–≤–∫–∏'))
async def get_my_requests(msg: Message):
    await msg.answer('üîñ –°–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º :)')

""" –ß–∞—Ç """
@dp.message_handler(Text(equals='üí¨ –ù–∞—à —á–∞—Ç'))
async def get_chat(msg: Message):
    await msg.answer('–ß—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É —á–∞—Ç—É, –∂–º–∏ —Å—é–¥–∞ @DEBitChat')