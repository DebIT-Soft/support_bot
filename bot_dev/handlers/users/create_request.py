import json
import os
from utils.other.users_process import is_subs

from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.storage import FSMContext
from aiogram.types.message import ContentType, Message
from data.config import SUPPORT_CHAT
from keyboards.default.upanel import *
from keyboards.inline.user_inline import *
from loader import dp
from states.all_states import Request
from utils.db_work.asks_tools.decline_request import decl_request
from utils.db_work.auth_tools.is_user_authorized import is_authorized
from utils.db_work.asks_tools.request_register import request_reg
from utils.db_work.asks_tools.saving_attachs import save_attach

""" –û—Ç–º–µ–Ω–∞ –ó–∞—è–≤–∫–∏ """
@dp.message_handler(Text(contains='–û—Ç–º–µ–Ω–∞'), state='*')
async def decline_auth(msg: Message, state: FSMContext):
    await msg.answer(
        '–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.',
        reply_markup=await upanel_kb()
    )
    
    # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω–∏—Ç—å –≤ –º–æ–º–µ–Ω—Ç –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –æ—à–∏–±–∫–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è
    curr_state = await state.get_state()
    if curr_state == 'Request:err_code':
        async with state.proxy() as data:
            theme = data['theme']
        if theme == '–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ':
            async with state.proxy() as fata:
                ask_id = data['ask_id']
            await decl_request(ask_id)

    await state.finish()


""" –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ """
@dp.message_handler(Text(equals="‚úçÔ∏è –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É"), state="*")
async def create_req(msg: Message, state: FSMContext):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∏–∑ –ª–∏—á–∫–∏
    if msg.chat.id > 0:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        uName = await is_authorized(msg.from_user.username)
        if uName is False:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
            await msg.answer(
                f'–ü—Ä–∏–≤–µ—Ç, {msg.from_user.full_name}!\n\n' +
                f'–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–æ–π <b>\"–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è\"</b> :)',
                reply_markup=await auth_kb()
            )
        else:
            subs_param, subs_msg = await is_subs(msg.from_user.id)

            if subs_param != 'ok':
                await msg.answer(
                        subs_msg,
                        reply_markup=await join_us(msg.from_user.id, subs_param)
                    )
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
            await msg.answer(
                '–í–≤–µ–¥–∏ —Ç–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—è –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞:',
                reply_markup=await themes_kb()
            )

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await Request.name.set()
            async with state.proxy() as data:
                data['name'] = uName

            await Request.theme.set()

""" –í–≤–æ–¥ —Ç–µ–º—ã –æ–±—Ä–∞—â–µ–Ω–∏—è """
@dp.message_handler(state=Request.theme)
async def get_theme(msg: Message, state: FSMContext):
    THEMES = json.load(open('./req_themes.json', encoding='utf-8-sig'))

    u_theme = msg.text

    for theme in THEMES:
        if theme['visible_name'] == u_theme:
            u_theme = theme['alias']
    
    async with state.proxy() as data:
        data['theme'] = u_theme
    
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ
    if u_theme == '–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ':
        await msg.answer(
            '–û–ø–∏—à–∏ —Å–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –±—É–¥—É—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã, ' +
            '—Ç–æ —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–ª–æ–∂–µ–Ω–∏—è, –∞ –ø–æ—Ç–æ–º —Å–∞–º–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –ï—Å–ª–∏ –∂–µ –Ω–∏—á–µ–≥–æ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å—Å—è –Ω–µ –±—É–¥–µ—Ç, ' +
            '—Ç–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ :).\n\n' +
            '<i>P.S.: –ö –∑–∞—è–≤–∫–µ –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ 1 —Ç–∏–ø–∞ - –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã.</i>',
            reply_markup=await cancel_req()
        )

        # –í—Ä–µ–º–µ–Ω–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞—è–≤–∫—É
        ask_id = await request_reg('first', '-', msg.from_user.username, msg.from_user.id, data['name'], data['theme'], 0, '-', '-', '-')

        async with state.proxy() as data:
            data['err_code'] = 0
            data['ask_id'] = ask_id
            data['attach_type'] = None        

        await Request.msg.set()
    else:
        await msg.answer(
            '–í–≤–µ–¥–∏ –∫–æ–¥ –æ—à–∏–±–∫–∏:',
            reply_markup=await cancel_req()
        )

        await Request.err_code.set()

""" –í–≤–æ–¥ –∫–æ–¥–∞ –æ—à–∏–±–∫–∏ """
@dp.message_handler(lambda msg: not msg.text.isdigit(), state=Request.err_code)
async def get_err_code_ex(msg: Message, state: FSMContext):
    await msg.answer(
        '–ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.\n\n–í–≤–µ–¥–∏ –∫–æ–¥ –æ—à–∏–±–∫–∏:',
        reply_markup=await cancel_req()
    )

@dp.message_handler(lambda msg: msg.text.isdigit(), state=Request.err_code)
async def get_err_code(msg: Message, state: FSMContext):
    await msg.answer(
        '–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è, –µ—Å–ª–∏ –∫ –∑–∞—è–≤–∫–µ –±—É–¥—É—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã, —Ç–æ —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–ª–æ–∂–µ–Ω–∏—è, –∞ –ø–æ—Ç–æ–º —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è.\n\n'+
        '<i>P.S.: –ö –∑–∞—è–≤–∫–µ –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ 1 —Ç–∏–ø–∞ - –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã.</i>',
        reply_markup=await cancel_req()
    )

    async with state.proxy() as data:
        data['err_code'] = msg.text
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞—è–≤–∫—É –∏ –ø–æ–ª—É—á–∞–µ–º –µ–µ ID
    ask_id = await request_reg('first', '-', msg.from_user.username, msg.from_user.id, data['name'], data['theme'], data['err_code'], '-', '-', '-')

    async with state.proxy() as data:
        data['ask_id'] = ask_id
        data['attach_type'] = None
    
    await Request.msg.set()

""" –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è """
@dp.message_handler(state=Request.msg, content_types=ContentType.PHOTO)
@dp.message_handler(state=Request.msg, content_types=ContentType.TEXT)
@dp.message_handler(state=Request.msg, content_types=ContentType.DOCUMENT)
async def get_message(msg: Message, state: FSMContext):
    # –ö–æ—Å—Ç—ã–ª—å
    async with state.proxy() as data:
        data['s'] = 's'

    # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç
    if msg.content_type == 'document':
        # –ï—Å–ª–∏ –±—ã–ª–∞ –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –∫ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º
        if data['attach_type'] == '–ö–∞—Ä—Ç–∏–Ω–∫–∞' and data['attach_type'] is not None:
            await msg.answer('ü§ï –û—à–∏–±–∫–∞, –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –ª–∏–±–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏, –ª–∏–±–æ –¥–æ–∫—É–º–µ–Ω—Ç—ã.')
        else:
            async with state.proxy() as data:
                data['attach_type'] = '–î–æ–∫—É–º–µ–Ω—Ç'

            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
            doc_info = await dp.bot.get_file(msg.document.file_id)
            # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞ –∏–º—è –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
            doc_name, doc_extension = os.path.splitext(doc_info.file_path)
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            download_doc = await dp.bot.download_file(doc_info.file_path)
            # –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∏ –∏–º—è —Ñ–∞–π–ª
            # –•—Ä–∞–Ω–∏–º —Ñ–∞–π–ª—ã —Å UID –≤ –∏–º–µ–Ω–∏
            doc_src = 'documents/' + doc_info.file_unique_id + doc_extension
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ
            await save_attach(data['ask_id'], doc_info.file_unique_id + doc_extension, '–î–æ–∫—É–º–µ–Ω—Ç', 'user', 'no')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–∞—Ç–∞–ª–æ–≥
            with open(doc_src, 'wb') as new_doc:
                new_doc.write(download_doc.getvalue())

    # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞
    if msg.content_type == 'photo':
        # –ï—Å–ª–∏ –±—ã–ª–∞ –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
        if data['attach_type'] == '–î–æ–∫—É–º–µ–Ω—Ç' and data['attach_type'] is not None:
            await msg.answer('ü§ï –û—à–∏–±–∫–∞, –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –ª–∏–±–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏, –ª–∏–±–æ –¥–æ–∫—É–º–µ–Ω—Ç—ã.')
        else:
            async with state.proxy() as data:
                data['attach_type'] = '–ö–∞—Ä—Ç–∏–Ω–∫–∞'

            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
            pic_info = await dp.bot.get_file(msg.photo[-1].file_id)
            # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞ –∏–º—è –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
            pic_name, pic_extension = os.path.splitext(pic_info.file_path)
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            download_pic = await dp.bot.download_file(pic_info.file_path)
            # –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∏ –∏–º—è —Ñ–∞–π–ª–∞
            # –•—Ä–∞–Ω–∏–º –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å UID –≤ –∏–º–µ–Ω–∏, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω –∫–æ—Ä–æ—á–µ
            pic_src = 'photos/' + pic_info.file_unique_id + pic_extension
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ
            await save_attach(data['ask_id'], pic_info.file_unique_id + pic_extension, '–ö–∞—Ä—Ç–∏–Ω–∫–∞', 'user', 'no')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–∞—Ç–∞–ª–æ–≥
            with open(pic_src, 'wb') as new_pic:
                new_pic.write(download_pic.getvalue())

    # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if msg.content_type == 'text' and len(msg.text) > 0:
        if data['attach_type'] is None:
            # –ë–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π
            async with state.proxy() as data:
                data['msg'] = msg.text
                data['have_attach'] = '–Ω–µ—Ç'
        else:
            # –° –≤–ª–æ–∂–µ–Ω–∏—è–º–∏
            async with state.proxy() as data:
                data['msg'] = msg.text
                data['have_attach'] = '–¥–∞'

        # region –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞—è–≤–∫—É

        # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await msg.answer(
            f'–ó–∞—è–≤–∫–∞ #{data["ask_id"]} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:\n\n' +
            f'–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{data["name"]}</b>\n' +
            f'–¢–µ–º–∞: <b>{data["theme"]}</b>\n' +
            f'–ö–æ–¥ –æ—à–∏–±–∫–∏: <b>{data["err_code"]}</b>\n' +
            f'–°–æ–æ–±—â–µ–Ω–∏–µ: \n\n{data["msg"]}\n\n' +
            f'–ü–æ—Å–ª–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è —Ç—ã –ø–æ–ª—É—á–∏—à—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ :)',
            reply_markup=await upanel_kb() 
        )

        # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–∞–ø–ø–æ—Ä—Ç-—á–∞—Ç
        await dp.bot.send_message(
            SUPPORT_CHAT,
            f'–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –æ—Ç @{msg.from_user.username}\n\n' +
            f'–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: <b>{data["ask_id"]}</b>\n' + 
            f'–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{data["name"]}</b>\n' + 
            f'–¢–µ–º–∞: <b>{data["theme"]}</b>\n' +
            f'–ö–æ–¥ –æ—à–∏–±–∫–∏: <b>{data["err_code"]}</b>\n' + 
            f'–í–ª–æ–∂–µ–Ω–∏—è: <b>{data["have_attach"]}</b>\n' +
            f'–¢–∏–ø –≤–ª–æ–∂–µ–Ω–∏–π: <b>{data["attach_type"]}</b>\n' +
            f'–¢–µ–∫—Å—Ç: \n\n<b>{data["msg"]}</b>\n\n' + 
            f'–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫ <b>(–¢–ì)</b> - –≤–≤–µ–¥–∏—Ç–µ /asks –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.'
        )

        await state.finish()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑–µ
        await request_reg('finish', data['ask_id'], msg.from_user.username, msg.from_user.id, data['name'], data['theme'], data['err_code'], data['msg'], data['have_attach'], data['attach_type'])
        # endregion
