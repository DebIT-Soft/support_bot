from aiogram.types.callback_query import CallbackQuery
from aiogram.types.input_media import InputMediaDocument, InputMediaPhoto
from keyboards.inline.user_inline import continue_request_kb
from aiogram.types.message import ContentType, Message
import os
from utils.db_work.asks_tools.pin_ask_to_supp import pin_ask
from utils.db_work.asks_tools.processing_attachs import get_attachs, edit_attach_status
from utils.db_work.asks_tools.resetting_request import ask_reset
from utils.db_work.asks_tools.saving_attachs import save_attach
from utils.db_work.asks_tools.closing_request import close_request
import re
from states.all_states import supportKB

from aiogram.dispatcher.storage import FSMContext
from utils.db_work.asks_tools.getting_ask_info import get_ask_info
from data.config import ADMINS, SUPPORTS, SUPPORT_CHAT
from aiogram.dispatcher.filters import Text
from aiogram import types
from keyboards.inline.support_inline import *
from loader import dp

""" –í—ã–±–æ—Ä –∑–∞—è–≤–∫–∏ """
@dp.message_handler(state=supportKB.ask)
async def process_req(msg: Message, state: FSMContext):
    if msg.from_user.id in SUPPORTS or msg.from_user.id in ADMINS:
        ask_id = msg.text.replace('‚úâÔ∏è –ó–∞—è–≤–∫–∞ #', '')

        await msg.answer(f'–ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞—è–≤–∫–µ #{ask_id}...')

        ask_info, user_id = await get_ask_info(ask_id)

        await msg.answer(f'{ask_info}', reply_markup=await work_with_request(ask_id, user_id))

        # –ï—Å–ª–∏ —É –∑–∞—è–≤–∫–∏ –µ—Å—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è, —Ç–æ –ø–æ–ª—É—á–∞–µ–º –∏—Ö
        if re.search('–í–ª–æ–∂–µ–Ω–∏—è: <b>–¥–∞</b>', ask_info):
            attach = None
            # –°–ø–∏—Å–æ–∫ –≤–ª–æ–∂–µ–Ω–∏–π
            files = await get_attachs(ask_id, 'user', 'no')
            # –ï—Å–ª–∏ –≤–ª–æ–∂–µ–Ω–∏–µ - –∫–∞—Ä—Ç–∏–Ω–∫–∞
            if re.search('–ö–∞—Ä—Ç–∏–Ω–∫–∞', ask_info):
                # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –ø–µ—Ä–≤—É—é —Å –ø–æ–¥–ø–∏—Å—å—é
                attach = [InputMediaPhoto(open(f'photos/{files[0]["name"]}', 'rb'), caption=f'–í–ª–æ–∂–µ–Ω–∏—è –∫ –∑–∞—è–≤–∫–µ #{ask_id}')]

                # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
                for item in range(1, len(files)):
                    attach.append(InputMediaPhoto(open(f'photos/{files[item]["name"]}', 'rb')))

            # –ï—Å–ª–∏ –≤–ª–æ–∂–µ–Ω–∏–µ - –¥–æ–∫—É–º–µ–Ω—Ç
            if re.search('–î–æ–∫—É–º–µ–Ω—Ç', ask_info):
                # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –ø–µ—Ä–≤—ã–π —Å –ø–æ–¥–ø–∏—Å—å—é
                attach = [InputMediaDocument(open(f'documents/{files[0]["name"]}', 'rb'), caption=f'–í–ª–æ–∂–µ–Ω–∏—è –∫ –∑–∞—è–≤–∫–µ #{ask_id}')]
                
                # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
                for item in range(1, len(files)):
                    attach.insert(0, InputMediaDocument(open(f'documents/{files[item]["name"]}', 'rb')))
            
            try:
                await dp.bot.send_media_group(SUPPORT_CHAT, attach)
            except Exception as e:
                await dp.bot.send_message(SUPPORT_CHAT, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–ª—å–±–æ–º–∞.\n–§–∞–π–ª: handlers/supports/answer_to_request.py\n–ú–µ—Ç–æ–¥: process_req\n\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–∑—É.\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:\n\n{str(e)}')
            

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∑–∞—è–≤–∫—É –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
        await pin_ask(msg.from_user.username, ask_id)
        
        await supportKB.curr_support.set()
        async with state.proxy() as data:
            data['curr_support'] = msg.from_user.username

        await supportKB.get_ans.set()

""" –†–∞–±–æ—Ç–∞ —Å –∑–∞—è–≤–∫–æ–π """
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('req_proc'), state=supportKB.get_ans)
async def cb_work_with_req(callback_query: CallbackQuery, state: FSMContext):
    if callback_query.from_user.id in SUPPORTS or callback_query.from_user.id in ADMINS:

        # –í—ã–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ callback_data –≤ —Å–ø–∏—Å–æ–∫
        cb_data = []
        for item in callback_query.data.split(":"):
            if not item.strip():
                continue
            cb_data.append(item.strip())

        # –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç—å
        if cb_data[1] == 'close':
            await state.finish()

            for msg_id in range(0, int(cb_data[4]) + 1):
                await dp.bot.delete_message(
                    SUPPORT_CHAT, callback_query.message.message_id + msg_id
                )

            await ask_reset(cb_data[2])
        else:
            curr_support = ''
            async with state.proxy() as data:
                curr_support = data['curr_support']
                data['ask_id'] = cb_data[2]
                data['attach_type'] = None
                data['user_id'] = cb_data[3]

            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Ç–æ—Ç –ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Ö–æ—á–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É
            if callback_query.from_user.username == curr_support:

                # –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–≤–µ—Ç–∏—Ç—å
                if cb_data[1] == 'answer':
                    
                    await dp.bot.send_message(
                        SUPPORT_CHAT,
                        f"@{callback_query.from_user.username}, –æ–∂–∏–¥–∞—é –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞—è–≤–∫—É #{cb_data[2]}...\n\n" +
                        f"–ï—Å–ª–∏ –∫ –æ—Ç–≤–µ—Ç—É –±—É–¥—É—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã, —Ç–æ —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∏—Ö, –∞ –ø–æ—Å–ª–µ - " +
                        f"—Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n–ï—Å–ª–∏ –∂–µ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –Ω–∏—á–µ–≥–æ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å—Å—è –Ω–µ –±—É–¥–µ—Ç, —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ üôÇ\n\n" +
                        f"<i>P.S.: –ö –∑–∞—è–≤–∫–µ –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ 1 —Ç–∏–ø–∞ - –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã.</i>"
                    )

                    await dp.bot.edit_message_text(
                        f'{callback_query.message.text}\n\n–ù–∞ –∑–∞—è–≤–∫—É –æ—Ç–≤–µ—Ç–∏–ª(-–∞) @{callback_query.from_user.username}',
                        SUPPORT_CHAT, callback_query.message.message_id
                    )

                    await edit_attach_status(data["ask_id"], 'user')


                    async with state.proxy() as data:
                        data['action'] = 'answer'

                # –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å
                if cb_data[1] == 'cancel':
                    await dp.bot.send_message(
                        SUPPORT_CHAT,
                        f"@{callback_query.from_user.username}, –æ–∂–∏–¥–∞—é –ø—Ä–∏—á–∏–Ω—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∑–∞—è–≤–∫–∞ #{cb_data[2]}...\n\n" +
                        f"–ï—Å–ª–∏ –∫ –æ—Ç–≤–µ—Ç—É –±—É–¥—É—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã, —Ç–æ —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∏—Ö, –∞ –ø–æ—Å–ª–µ - " +
                        f"—Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n–ï—Å–ª–∏ –∂–µ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –Ω–∏—á–µ–≥–æ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å—Å—è –Ω–µ –±—É–¥–µ—Ç, —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ üôÇ\n\n" +
                        f"<i>P.S.: –ö –∑–∞—è–≤–∫–µ –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ 1 —Ç–∏–ø–∞ - –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã.</i>"
                    )

                    await dp.bot.edit_message_text(
                        f'{callback_query.message.text}\n\n–ó–∞—è–≤–∫—É –æ—Ç–∫–ª–æ–Ω–∏–ª(-–∞) @{callback_query.from_user.username}',
                        SUPPORT_CHAT, callback_query.message.message_id
                    )

                    async with state.proxy() as data:
                        data['action'] = 'decline'

                
                await supportKB.msg.set()

""" –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞—è–≤–∫—É/–ø—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞ """
@dp.message_handler(state=supportKB.msg, content_types=ContentType.PHOTO)
@dp.message_handler(state=supportKB.msg, content_types=ContentType.TEXT)
@dp.message_handler(state=supportKB.msg, content_types=ContentType.DOCUMENT)
async def get_request_answer(msg: Message, state: FSMContext):
    if msg.from_user.id in SUPPORTS or msg.from_user.id in ADMINS:
        curr_support = ''
        async with state.proxy() as data:
            curr_support = data['curr_support']

        if msg.from_user.username == curr_support:
            # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç
            if msg.content_type == 'document':
                # –ï—Å–ª–∏ –±—ã–ª–∞ –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –∫ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º
                if data['attach_type'] == '–ö–∞—Ä—Ç–∏–Ω–∫–∞' and data['attach_type'] is not None:
                    await msg.answer('ü§ï –û—à–∏–±–∫–∞, –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –ª–∏–±–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏, –ª–∏–±–æ –¥–æ–∫—É–º–µ–Ω—Ç—ã.')
                else:
                    async with state.proxy() as data:
                        data['attach_type'] = '–î–æ–∫—É–º–µ–Ω—Ç'

                    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
                    doc_info = await dp.bot.get_file(msg.document.file_id)
                    # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞ –∏–º—è –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
                    doc_name, doc_extension = os.path.splitext(doc_info.file_path)
                    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                    download_doc = await dp.bot.download_file(doc_info.file_path)
                    # –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∏ –∏–º—è —Ñ–∞–π–ª
                    # –•—Ä–∞–Ω–∏–º —Ñ–∞–π–ª—ã —Å UID –≤ –∏–º–µ–Ω–∏
                    doc_src = 'documents/' + doc_info.file_unique_id + doc_extension
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ
                    await save_attach(data['ask_id'], doc_info.file_unique_id + doc_extension, '–î–æ–∫—É–º–µ–Ω—Ç', 'support', 'no')
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–∞—Ç–∞–ª–æ–≥
                    with open(doc_src, 'wb') as new_doc:
                        new_doc.write(download_doc.getvalue())

            # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞
            if msg.content_type == 'photo':
                # –ï—Å–ª–∏ –±—ã–ª–∞ –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
                if data['attach_type'] == '–î–æ–∫—É–º–µ–Ω—Ç' and data['attach_type'] is not None:
                    await msg.answer('ü§ï –û—à–∏–±–∫–∞, –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –ª–∏–±–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏, –ª–∏–±–æ –¥–æ–∫—É–º–µ–Ω—Ç—ã.')
                else:
                    async with state.proxy() as data:
                        data['attach_type'] = '–ö–∞—Ä—Ç–∏–Ω–∫–∞'

                    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
                    pic_info = await dp.bot.get_file(msg.photo[-1].file_id)
                    # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞ –∏–º—è –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
                    pic_name, pic_extension = os.path.splitext(pic_info.file_path)
                    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                    download_pic = await dp.bot.download_file(pic_info.file_path)
                    # –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∏ –∏–º—è —Ñ–∞–π–ª–∞
                    # –•—Ä–∞–Ω–∏–º –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å UID –≤ –∏–º–µ–Ω–∏, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω –∫–æ—Ä–æ—á–µ
                    pic_src = 'photos/' + pic_info.file_unique_id + pic_extension
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ
                    await save_attach(data['ask_id'], pic_info.file_unique_id + pic_extension, '–ö–∞—Ä—Ç–∏–Ω–∫–∞', 'support', 'no')
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–∞—Ç–∞–ª–æ–≥
                    with open(pic_src, 'wb') as new_pic:
                        new_pic.write(download_pic.getvalue())

            # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if msg.content_type == 'text' and len(msg.text) > 0:
                await msg.answer(f'–û—Ç–≤–µ—Ç –Ω–∞ –∑–∞—è–≤–∫—É #{data["ask_id"]} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.')
                
                if data['attach_type'] is None:
                    # –ë–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π
                    async with state.proxy() as data:
                        data['msg'] = msg.text
                        data['have_attach'] = '–Ω–µ—Ç'

                    if data['action'] == 'decline':
                        await dp.bot.send_message(
                            data['user_id'],
                            f'–ó–∞—è–≤–∫–∞ #{data["ask_id"]} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü—Ä–∏—á–∏–Ω–∞:\n\n{data["msg"]}'
                        )
                    else:
                        await dp.bot.send_message(
                            data['user_id'],
                            f'–ó–∞—è–≤–∫–∞ #{data["ask_id"]} –±—ã–ª–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞. –û—Ç–≤–µ—Ç:\n\n{data["msg"]}\n\n<i>–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –±—ã–ª —Ä–µ—à–µ–Ω - –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–û—Ç–≤–µ—Ç–∏—Ç—å\".\n' +
                            f'–ï—Å–ª–∏ –∂–µ –≤–æ–ø—Ä–æ—Å –±—ã–ª —Ä–µ—à–µ–Ω, —Ç–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É \"–ó–∞–≤–µ—Ä—à–∏—Ç—å\" :).\nP.S.: –ó–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç–∞ —á–µ—Ä–µ–∑ —á–∞—Å.</i>',
                            reply_markup=await continue_request_kb(data['ask_id'], data['user_id'])
                        )
                    await state.finish()
                else:
                    # –° –≤–ª–æ–∂–µ–Ω–∏—è–º–∏
                    async with state.proxy() as data:
                        data['msg'] = msg.text
                        data['have_attach'] = '–¥–∞'

                    # –ü–æ–ª—É—á–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏—è
                    files = await get_attachs(data['ask_id'], 'support', 'no')
                    attach = ''

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö –ø–æ —Ç–∏–ø—É
                    if re.search('–î–æ–∫—É–º–µ–Ω—Ç', str(files)):
                        # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –ø–µ—Ä–≤—ã–π —Å –ø–æ–¥–ø–∏—Å—å—é
                        attach = [InputMediaDocument(open(f'documents/{files[0]["name"]}', 'rb'), caption=f"–í–ª–æ–∂–µ–Ω–∏—è –∫ –∑–∞—è–≤–∫–µ #{data['ask_id']}")]
                            
                        # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
                        for item in range(1, len(files)):
                            attach.insert(0, InputMediaDocument(open(f'documents/{files[item]["name"]}', 'rb')))

                    if re.search('–ö–∞—Ä—Ç–∏–Ω–∫–∞', str(files)):
                        # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –ø–µ—Ä–≤—É—é —Å –ø–æ–¥–ø–∏—Å—å—é
                        attach = [InputMediaPhoto(open(f'photos/{files[0]["name"]}', 'rb'), caption=f"–í–ª–æ–∂–µ–Ω–∏—è –∫ –∑–∞—è–≤–∫–µ #{data['ask_id']}")]
                        
                        # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
                        for item in range(1, len(files)):
                                attach.append(InputMediaPhoto(open(f'photos/{files[item]["name"]}', 'rb')))
                        
                    if data['action'] == 'decline':
                        await dp.bot.send_message(
                            data['user_id'],
                            f'–ó–∞—è–≤–∫–∞ #{data["ask_id"]} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü—Ä–∏—á–∏–Ω–∞:\n\n{data["msg"]}'
                        )

                        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∑–∞—è–≤–∫—É
                        await close_request(data['ask_id'], '–æ—Ç–∫–ª–æ–Ω–µ–Ω')
                    else:
                        await dp.bot.send_message(
                            data['user_id'],
                            f'–ó–∞—è–≤–∫–∞ #{data["ask_id"]} –±—ã–ª–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞. –û—Ç–≤–µ—Ç:\n\n{data["msg"]}\n\n<i>–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –±—ã–ª —Ä–µ—à–µ–Ω - –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–û—Ç–≤–µ—Ç–∏—Ç—å\".\n' +
                            f'–ï—Å–ª–∏ –∂–µ –≤–æ–ø—Ä–æ—Å –±—ã–ª —Ä–µ—à–µ–Ω, —Ç–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É \"–ó–∞–≤–µ—Ä—à–∏—Ç—å\" :).\nP.S.: –ó–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç–∞ —á–µ—Ä–µ–∑ —á–∞—Å.</i>',
                            reply_markup=await continue_request_kb(data['ask_id'], data['user_id'])
                        )

                        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∑–∞—è–≤–∫—É
                        await close_request(data['ask_id'], '–∑–∞–∫—Ä—ã—Ç')
                        

                    user_id = data['user_id']
                    ask_id = data['ask_id']

                    await state.finish()

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–ª–æ–∂–µ–Ω–∏—è
                    try:
                        await dp.bot.send_media_group(user_id, attach)
                    except Exception as e:
                        await dp.bot.send_message(SUPPORT_CHAT, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–ª—å–±–æ–º–∞.\n–§–∞–π–ª: handlers/supports/answer_to_request.py\n–ú–µ—Ç–æ–¥: get_request_answer\n\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–∑—É.\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:\n\n{str(e)}')
            
                    # –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–ª–æ–∂–µ–Ω–∏–π
                    await edit_attach_status(ask_id, 'support')

